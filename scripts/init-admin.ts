import 'dotenv/config'

import * as readline from 'node:readline'

import { eq } from 'drizzle-orm'
import { drizzle } from 'drizzle-orm/node-postgres'

import { auth } from '~/lib/auth/auth.server'
import type { TransactionType } from '~/lib/db/db.server'
import { isValidEmail } from '~/lib/utils'

import * as schema from '../app/lib/db/schema'

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout,
})

const askEmail = (): Promise<string> => {
	return new Promise(resolve => {
		rl.question(
			'\n‚ùì Ë´ãËº∏ÂÖ•ÁÆ°ÁêÜÂì°ÈõªÂ≠êÈÉµ‰ª∂Âú∞ÂùÄ (Please enter Admin Email) (Êåâ‰∏ã ^+C ‰ª•ÈóúÈñâ) (Press ^+C to exit): ',
			email => {
				if (!isValidEmail(email)) {
					console.error(
						'‚ùå ÁÑ°ÊïàÁöÑÈõªÂ≠êÈÉµ‰ª∂Ê†ºÂºèÔºåË´ãÈáçÊñ∞Ëº∏ÂÖ•„ÄÇ(Invalid email, try again.)',
					)
					return resolve(askEmail())
				}
				resolve(email)
			},
		)
	})
}

const askName = (): Promise<string> => {
	return new Promise(resolve => {
		rl.question(
			'\n‚ùì Ë®≠ÂÆöÊÇ®ÁöÑÂêçÂ≠ó (Please enter your name) (Êåâ‰∏ã ^+C ‰ª•ÈóúÈñâ) (Press ^+C to exit): ',
			name => resolve(name),
		)
	})
}

async function checkAndCreateAdmin() {
	const db = drizzle(process.env.DATABASE_URL!, { schema })

	try {
		// Check if admin exists
		const admin = await db.query.user.findMany({
			where: (t, { eq }) => eq(t.role, 'admin'),
			orderBy: (t, { asc }) => asc(t.createdAt),
		})

		if (admin.length === 0) {
			const email = await askEmail()
			const name = await askName()

			// Create admin
			console.log(
				'\nüîÑ ÁÆ°ÁêÜÂì°‰∏çÂ≠òÂú®ÔºåÊ≠£Âú®Âª∫Á´ã... (Admin does not exist. Creating...)',
			)
			const { user } = await auth.api.createUser({
				body: {
					email: email,
					password: '',
					name: name,
					role: 'admin',
				},
			})
			await db
				.update(schema.user)
				.set({
					emailVerified: true,
				})
				.where(eq(schema.user.id, user.id))

			console.log(
				`‚úÖ ÁÆ°ÁêÜÂì°Â∑≤Âª∫Á´ãÔºÅË´ã‰ΩøÁî® ${'user.email'} ÁôªÂÖ•„ÄÇ (Admin created! Sign in with ${'user.email'})`,
			)

			console.log('üîÑ Ê≠£Âú®Âª∫Á´ãÈ†êË®≠Ë≥áÊñô (Inserting default data)...')
			await db.transaction(async tx => {
				await insertDefaultData(tx, user.id)
			})
			console.log('‚úÖ È†êË®≠Ë≥áÊñôÂ∑≤Âª∫Á´ã (Default data created)')
		} else {
			console.log(`‚ö†Ô∏è ÁÆ°ÁêÜÂì°Â∑≤Â≠òÂú®„ÄÇAdmin already exists.`)
		}
	} catch (error) {
		console.error(
			'‚ùå Ê™¢Êü•/Âª∫Á´ãÁÆ°ÁêÜÂì°‰ΩøÁî®ËÄÖÊôÇÁôºÁîüÈåØË™§ (Error checking/creating admin):',
			error,
		)
		process.exit(1)
	} finally {
		process.exit(0)
	}
}

const insertDefaultData = async (tx: TransactionType, adminId: string) => {
	await tx.insert(schema.seo).values(defaultSEOs)

	const [seoCreated] = await tx
		.insert(schema.seo)
		.values({
			metaTitle: defaultPost.title,
			metaDescription: defaultPost.excerpt,
			autoGenerated: true,
			route: '/blog/' + defaultPost.slug,
		})
		.returning()
	console.log(
		'\n‚úÖ È†êË®≠ÊñáÁ´† SEO Â∑≤Âª∫Á´ã (Default post SEO created):',
		defaultPost.title,
	)

	const [postCreated] = await tx
		.insert(schema.post)
		.values({
			authorId: adminId,
			title: defaultPost.title,
			content: defaultPost.content,
			slug: defaultPost.slug,
			excerpt: defaultPost.excerpt,
			status: defaultPost.status,
			featuredImage: defaultPost.featuredImage,
			seoId: seoCreated.id,
		})
		.returning()
	console.log('\n‚úÖ È†êË®≠ÊñáÁ´†Â∑≤Âª∫Á´ã (Default post created):', postCreated.title)

	const tags = await tx.insert(schema.tag).values(defaultTags).returning()
	console.log(
		'\n‚úÖ È†êË®≠Ê®ôÁ±§Â∑≤Âª∫Á´ã (Default tags created):',
		defaultTags.map(tag => ({
			name: tag.name,
		})),
	)

	const categories = await tx
		.insert(schema.category)
		.values(defaultCategories)
		.returning()
	console.log(
		'\n‚úÖ È†êË®≠ÂàÜÈ°ûÂ∑≤Âª∫Á´ã (Default categories created):',
		defaultCategories.map(category => ({
			name: category.name,
		})),
	)

	await tx.insert(schema.postToTag).values(
		tags.map(tag => ({
			postId: postCreated.id,
			tagId: tag.id,
		})),
	)

	await tx.insert(schema.postToCategory).values(
		categories.map(category => ({
			postId: postCreated.id,
			categoryId: category.id,
		})),
	)
	console.log(
		'\n‚úÖ È†êË®≠ÊñáÁ´†ËàáÊ®ôÁ±§„ÄÅÂàÜÈ°ûÈóúËÅØÂ∑≤Âª∫Á´ã (Default post to tags and categories created)',
	)
}

const defaultSEOs = [
	{
		autoGenerated: true,
		route: '/',
		metaTitle: 'Papa - First and only online application for SMEs ‚õ∞Ô∏è',
		metaDescription: `Papa is a simple and thorough platform for modern SMEs.
            With one Papa, you can manage your internal workflow and external presence all together.
        `.replace(/\s+/g, ' '),
	},
	{
		autoGenerated: true,
		route: '/blog',
		metaTitle: 'Blog - Where you see my sounds üéµ',
		metaDescription: 'This is where I share my thoughts and insights.',
	},
	{
		autoGenerated: true,
		route: '/dashboard',
		metaTitle: 'Papa Dashboard',
	},
]
const defaultPost = {
	slug: 'what-is-papa',
	title: 'What is Papa',
	content: JSON.stringify({
		type: 'doc',
		content: [
			{
				type: 'heading',
				attrs: { textAlign: null, level: 2 },
				content: [
					{
						type: 'text',
						text: 'ü•î Papa ‚Äî The AI-Native App Framework for SMEs',
					},
				],
			},
			{
				type: 'blockquote',
				content: [
					{
						type: 'paragraph',
						attrs: { textAlign: null },
						content: [
							{
								type: 'text',
								marks: [{ type: 'bold' }],
								text: 'Papa is an AI-native open-source application designed to help SMEs manage both internal workflows and external presence ‚Äî all in one place.',
							},
						],
					},
				],
			},
			{
				type: 'paragraph',
				attrs: { textAlign: null },
				content: [
					{
						type: 'text',
						text: "What's better? You own the code. Forever. üöÄ",
					},
				],
			},
			{ type: 'horizontalRule' },
			{
				type: 'heading',
				attrs: { textAlign: null, level: 3 },
				content: [{ type: 'text', text: "‚ú® Features you'll love" }],
			},
			{
				type: 'bulletList',
				content: [
					{
						type: 'listItem',
						content: [
							{
								type: 'paragraph',
								attrs: { textAlign: null },
								content: [{ type: 'text', text: '‚úÖ Fully responsive layout' }],
							},
						],
					},
					{
						type: 'listItem',
						content: [
							{
								type: 'paragraph',
								attrs: { textAlign: null },
								content: [{ type: 'text', text: 'üåô Dark mode support' }],
							},
						],
					},
					{
						type: 'listItem',
						content: [
							{
								type: 'paragraph',
								attrs: { textAlign: null },
								content: [
									{
										type: 'text',
										text: 'üìù Beautiful, intuitive rich text editing powered by ',
									},
									{ type: 'text', marks: [{ type: 'bold' }], text: 'Tiptap' },
								],
							},
						],
					},
					{
						type: 'listItem',
						content: [
							{
								type: 'paragraph',
								attrs: { textAlign: null },
								content: [
									{
										type: 'text',
										text: 'üß† Smart structure with Markdown + syntax highlighting',
									},
								],
							},
						],
					},
					{
						type: 'listItem',
						content: [
							{
								type: 'paragraph',
								attrs: { textAlign: null },
								content: [
									{
										type: 'text',
										text: 'üé® Supports all common text styles ‚Äî ',
									},
									{ type: 'text', marks: [{ type: 'bold' }], text: 'bold' },
									{ type: 'text', text: ', ' },
									{ type: 'text', marks: [{ type: 'italic' }], text: 'italic' },
									{ type: 'text', text: ', ' },
									{
										type: 'text',
										marks: [{ type: 'code' }],
										text: 'inline code',
									},
									{ type: 'text', text: ', ' },
									{
										type: 'text',
										marks: [{ type: 'code' }],
										text: 'code blocks',
									},
									{ type: 'text', text: ', super‚Å∫sub, and more!' },
								],
							},
						],
					},
				],
			},
			{
				type: 'codeBlock',
				attrs: { language: null },
				content: [
					{
						type: 'text',
						text: '// TypeScript Example\nconst Papa = (papa: string) => {\n  alert(`${Papa} is free and open source under MIT license!`)\n}',
					},
				],
			},
			{
				type: 'codeBlock',
				attrs: { language: null },
				content: [
					{
						type: 'text',
						text: '// Golang Hello World\nfunc main() {\n\tfmt.Println("Hello, ‰∏ñÁïå")\n\tfmt.Println("Hello, „Åõ„Åã„ÅÑ")\n\tfmt.Println("Hola, mundo")\n}',
					},
				],
			},
			{
				type: 'blockquote',
				content: [
					{
						type: 'paragraph',
						attrs: { textAlign: null },
						content: [
							{
								type: 'text',
								text: '‚ö†Ô∏è H1 is reserved for titles ‚Äî please use H2‚ÄìH4 in your content.',
							},
						],
					},
				],
			},
			{ type: 'horizontalRule' },
			{
				type: 'heading',
				attrs: { textAlign: null, level: 3 },
				content: [{ type: 'text', text: 'üöÄ Get Started Now' }],
			},
			{
				type: 'heading',
				attrs: { textAlign: null, level: 4 },
				content: [{ type: 'text', text: '1. Clone the repo' }],
			},
			{
				type: 'codeBlock',
				attrs: { language: null },
				content: [
					{
						type: 'text',
						text: 'git clone https://github.com/gjc14/papa.git ',
					},
				],
			},
			{
				type: 'heading',
				attrs: { textAlign: null, level: 4 },
				content: [{ type: 'text', text: '2. Set up your environment' }],
			},
			{
				type: 'codeBlock',
				attrs: { language: null },
				content: [{ type: 'text', text: 'mv .env.sample .env ' }],
			},
			{
				type: 'heading',
				attrs: { textAlign: null, level: 4 },
				content: [{ type: 'text', text: '3. Initialize the app' }],
			},
			{
				type: 'codeBlock',
				attrs: { language: null },
				content: [{ type: 'text', text: 'pnpm run init ' }],
			},
			{
				type: 'paragraph',
				attrs: { textAlign: null },
				content: [
					{ type: 'text', text: 'Then open your browser and go to ' },
					{ type: 'text', marks: [{ type: 'code' }], text: 'localhost:5173' },
					{ type: 'text', text: ' to see ' },
					{ type: 'text', marks: [{ type: 'bold' }], text: 'your Papa' },
					{ type: 'text', text: ' in action!' },
				],
			},
			{ type: 'horizontalRule' },
			{
				type: 'heading',
				attrs: { textAlign: null, level: 3 },
				content: [{ type: 'text', text: 'üí¨ Why Papa?' }],
			},
			{
				type: 'blockquote',
				content: [
					{
						type: 'paragraph',
						attrs: { textAlign: null },
						content: [
							{
								type: 'text',
								text: 'Papa helps developers and teams build internal tools, portals, and public sites ‚Äî fast.',
							},
							{ type: 'hardBreak' },
							{
								type: 'text',
								text: 'You get the flexibility of code, the speed of modern frameworks, and ',
							},
							{
								type: 'text',
								marks: [{ type: 'bold' }],
								text: 'no vendor lock-in',
							},
							{ type: 'text', text: '.' },
						],
					},
				],
			},
			{
				type: 'paragraph',
				attrs: { textAlign: null },
				content: [
					{ type: 'text', text: "üßë‚Äçüíª It's yours. It's fast. It's open source." },
				],
			},
		],
	}),
	excerpt:
		"Papa is an AI Native for SMEs to manage both internal workflow and external image. What's better? It's open souce!",
	featuredImage:
		'https://images.unsplash.com/photo-1552993873-0dd1110e025f?q=80&w=2765&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
	status: 'PUBLISHED',
}
const defaultTags = [
	{
		name: 'Papa',
		slug: 'papa',
	},
	{
		name: 'Open Source',
		slug: 'open-source',
	},
]
const defaultCategories = [
	{
		name: 'SMEs',
		slug: 'smes',
	},
	{
		name: 'ERP',
		slug: 'erp',
	},
	{
		name: 'SEO',
		slug: 'seo',
	},
	{
		name: 'CWM',
		slug: 'cwm',
	},
]

await checkAndCreateAdmin()
