import type { Session } from '~/lib/auth/auth-client'
import type { PostWithRelations } from '~/lib/db/post.server'
import { PostStatus, type user as userTable } from '~/lib/db/schema'

export const generateNewPost = (user: Session['user']): PostWithRelations => {
	const now = new Date()
	return {
		id: -1,
		createdAt: now,
		updatedAt: now,
		title: '',
		slug: '',
		content: null,
		excerpt: null,
		featuredImage: null,
		status: PostStatus[0],
		authorId: user.id,
		author: normalizeUndefinedToNull(user),
		tags: [],
		categories: [],
		seo: {
			id: -1,
			createdAt: now,
			updatedAt: now,
			metaTitle: null,
			metaDescription: null,
			keywords: null,
			ogImage: null,
			autoGenerated: true,
			route: null,
			postId: null,
		},
	}
}

/** Normalize undefined values to null to match database schema*/
function normalizeUndefinedToNull(
	user: Session['user'],
): typeof userTable.$inferSelect {
	const normalized: any = { ...user }

	for (const key in normalized) {
		if (normalized[key] === undefined) {
			normalized[key] = null
		}
	}

	return normalized
}
