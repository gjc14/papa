import { useEffect, useMemo, useState } from 'react'
import { useFetcher, useLoaderData } from 'react-router'

import { type ColumnDef } from '@tanstack/react-table'
import { PlusCircle } from 'lucide-react'

import { Button } from '~/components/ui/button'
import { DropdownMenuItem } from '~/components/ui/dropdown-menu'
import { Input } from '~/components/ui/input'
import { getSEOs } from '~/lib/db/seo.server'
import {
	DashboardActions,
	DashboardHeader,
	DashboardSectionWrapper,
	DashboardTitle,
} from '~/routes/papa/dashboard/components/dashboard-wrapper'
import {
	DashboardDataTableMoreMenu,
	DataTable,
} from '~/routes/papa/dashboard/components/data-table'
import { SeoContent } from '~/routes/papa/dashboard/components/seo-content'

import { SimpleSortHeader } from '../components/data-table/simple-sort-header'

export const loader = async () => {
	const { seos } = await getSEOs()

	return { seos }
}

export type SeoLoaderType = Awaited<ReturnType<typeof loader>>['seos'][number]

export default function SEO() {
	const { seos } = useLoaderData<typeof loader>()
	const [open, setOpen] = useState(false)
	const [rowsDeleting, setRowsDeleting] = useState<Set<string>>(new Set())

	const tableData = useMemo(() => {
		return seos.map(s => ({
			...s,
			setRowsDeleting,
		}))
	}, [seos])

	return (
		<DashboardSectionWrapper>
			<DashboardHeader>
				<DashboardTitle
					title="SEO"
					description="SEO data is connect to post or route. You could set in either here or in post or route."
				></DashboardTitle>
				<DashboardActions>
					<Button size={'sm'} onClick={() => setOpen(true)}>
						<PlusCircle size={16} />
						<p className="text-xs">Create seo</p>
					</Button>
					<SeoContent
						method="POST"
						action={`/dashboard/seo/resource`}
						open={open}
						setOpen={setOpen}
					/>
				</DashboardActions>
			</DashboardHeader>
			<DataTable
				columns={columns}
				data={tableData}
				rowGroupStyle={[
					{
						rowIds: rowsDeleting,
						className: 'opacity-50 pointer-events-none',
					},
				]}
			>
				{table => (
					<Input
						placeholder="Filter route..."
						value={(table.getColumn('route')?.getFilterValue() as string) ?? ''}
						onChange={event =>
							table.getColumn('route')?.setFilterValue(event.target.value)
						}
						className="max-w-sm"
					/>
				)}
			</DataTable>
		</DashboardSectionWrapper>
	)
}

export const columns: ColumnDef<
	SeoLoaderType & {
		setRowsDeleting: React.Dispatch<React.SetStateAction<Set<string>>>
	}
>[] = [
	{
		accessorKey: 'route',
		header: ({ column }) => {
			return <SimpleSortHeader column={column}>Route</SimpleSortHeader>
		},
		accessorFn: row => row.route ?? `/blog/${row.post?.slug}`,
	},
	{
		accessorKey: 'metaTitle',
		header: ({ column }) => {
			return <SimpleSortHeader column={column}>Title</SimpleSortHeader>
		},
	},
	{
		accessorKey: 'description',
		header: 'Description',
		cell: ({ row }) => {
			return (
				<span className="block w-28 truncate md:w-60">
					{row.original.metaDescription}
				</span>
			)
		},
	},
	{
		accessorKey: 'autoGenerated',
		header: ({ column }) => {
			return <SimpleSortHeader column={column}>Auto Generated</SimpleSortHeader>
		},
		accessorFn: row => (row.autoGenerated ? 'Yes' : 'No'),
	},
	{
		accessorKey: 'createdAt',
		header: ({ column }) => {
			return <SimpleSortHeader column={column}>Created at</SimpleSortHeader>
		},
		accessorFn: row => new Date(row.createdAt).toLocaleString('zh-TW'),
	},
	{
		accessorKey: 'updatedAt',
		header: ({ column }) => {
			return <SimpleSortHeader column={column}>Updated At</SimpleSortHeader>
		},
		accessorFn: row => new Date(row.updatedAt).toLocaleString('zh-TW'),
	},
	{
		accessorKey: 'id',
		header: 'Edit',
		cell: ({ row }) => {
			const fetcher = useFetcher()

			const rowId = row.id
			const [open, setOpen] = useState(false)
			const id = row.original.id
			const deleteTarget = row.original.metaTitle ?? undefined

			useEffect(() => {
				if (fetcher.state !== 'idle') {
					row.original.setRowsDeleting(prev => {
						const newSet = new Set(prev)
						newSet.add(rowId)
						return newSet
					})
				} else {
					row.original.setRowsDeleting(prev => {
						const newSet = new Set(prev)
						newSet.delete(rowId)
						return newSet
					})
				}
			}, [fetcher.state])

			return (
				<>
					<DashboardDataTableMoreMenu
						id={id}
						hideDelete={row.original.autoGenerated}
						deleteTarget={deleteTarget}
						onDelete={() => {
							fetcher.submit(
								{ id },
								{
									method: 'DELETE',
									action: `/dashboard/seo/resource`,
								},
							)
						}}
					>
						<DropdownMenuItem onClick={() => setOpen(true)}>
							Edit
						</DropdownMenuItem>
					</DashboardDataTableMoreMenu>
					<SeoContent
						method="PUT"
						action={`/dashboard/seo/resource`}
						seo={row.original}
						open={open}
						setOpen={setOpen}
					/>
				</>
			)
		},
	},
]
